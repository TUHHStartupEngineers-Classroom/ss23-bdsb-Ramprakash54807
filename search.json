[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "MyLabJournal",
    "section": "",
    "text": "require(tidyverse) library(readxl) library(conflicted) library(tibble) library(readr) library(dplyr) library(magrittr) library(tidyr)\nlibrary(stringr) library(ggplot2)\nconflicts_prefer(magrittr::set_names)"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#sales-by-year--",
    "href": "content/01_journal/01_tidyverse.html#sales-by-year--",
    "title": "MyLabJournal",
    "section": "6.1 6.1 Sales by Year —-",
    "text": "6.1 6.1 Sales by Year —-\nlibrary(lubridate)\n\nStep 1 - Manipulate\nsales_by_year_tbl <- bike_orderlines_wrangled_tbl %>%\n#### Select columns select(order_date, total_price) %>%\n#### Add year column mutate(year = year(order_date)) %>%\n#### Grouping by year and summarizing sales group_by(year) %>% summarize(sales = sum(total_price)) %>%\n#### Optional: Add a column that turns the numbers into a currency format #### (makes it in the plot optically more appealing) #### mutate(sales_text = scales::dollar(sales)) <- Works for dollar values mutate(sales_text = scales::dollar(sales, big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“))\n\n\nStep 2 - Visualize\nsales_by_year_tbl %>%\n#### Setup canvas with the columns year (x-axis) and sales (y-axis) ggplot(aes(x = year, y = sales)) +\n#### Geometries geom_col(fill = “#2DC6D6”) + # Use geom_col for a bar plot geom_label(aes(label = sales_text)) + # Adding labels to the bars geom_smooth(method = “lm”, se = FALSE) + # Adding a trendline\n#### Formatting #### scale_y_continuous(labels = scales::dollar) + # Change the y-axis. #### Again, we have to adjust it for euro values scale_y_continuous(labels = scales::dollar_format(big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) + labs( title =”Revenue by year”, subtitle = “Upward Trend”, x = ““, # Override defaults for x and y y =”Revenue” )"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#sales-by-year-and-category--",
    "href": "content/01_journal/01_tidyverse.html#sales-by-year-and-category--",
    "title": "MyLabJournal",
    "section": "6.2 6.2 Sales by Year and Category —-",
    "text": "6.2 6.2 Sales by Year and Category —-\n\nStep 1 - Manipulate\nsales_by_year_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%\n#### Select columns and add a year select(order_date, total_price, category_1) %>% mutate(year = year(order_date)) %>%\n#### Group by and summarize year and main catgegory group_by(year, category_1) %>% summarise(sales = sum(total_price)) %>% ungroup() %>%\n#### Format $ Text mutate(sales_text = scales::dollar(sales, big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“))\n\n\nStep 2 - Visualize\nsales_by_year_cat_1_tbl %>%\n#### Set up x, y, fill ggplot(aes(x = year, y = sales, fill = category_1)) +\n#### Geometries geom_col() + # Run up to here to get a stacked bar plot\n#### Facet facet_wrap(~ category_1) +\n#### Formatting scale_y_continuous(labels = scales::dollar_format(big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) + labs( title =”Revenue by year and main category”, subtitle = “Each product category has an upward trend”, fill = “Main category” # Changes the legend name )"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "MyLabJournal",
    "section": "",
    "text": "#Assignment\n\n1 API Challenge\n\nThis API to find out when the ISS (International Space Station) will be passing over Hamburg (which is at latitude 53.5511, longitude: 9.9937): This API returns times to us in the form of Unix time.\nlibrary(glue) library(httr) library(jsonlite) resp <- GET(“https://raw.githubusercontent.com/TUHHStartupEngineers/dat_sci_ss23/master/03/bike_data.json”, query = list(lat =53.5511, lon = 9.9937)) resp data = fromJSON(rawToChar(resp$content)) data\n\n\n\n2 WEB Scraping Challenge\nlibrary(RSQLite) library(tidyverse) library(httr) library(glue) library(jsonlite) library(rvest) library(stringi) library(xopen) library(dplyr) base_url <- ‘https://www.rosebikes.com/bikes’ # 1. Function to get bike family URLs. get_bike_family_urls <- function(base_url) {\nbike_family_urls <- read_html(base_url) %>% html_nodes(css = “.catalog-categories-item > a”) %>% html_attr(‘href’) %>%\n# Convert vector to tibble\n\nenframe(name = \"position\", value = \"subdirectory\") %>%\n# Add the domain because we will get only the subdirectories\nmutate(\n  url = glue('https://www.rosebikes.com{subdirectory}')\n) \nbike_family_urls <- bike_family_urls %>% filter(!grepl(‘sale’, url)) %>% filter(!grepl(‘kids’, url)) bike_family_urls <- bike_family_urls[‘url’]\n} # 2. Function to get bike family URLs. get_model_urls <- function(url) {\nbike_type_url <- read_html(url) %>% html_nodes(css = “.catalog-category-bikes__content > a”) %>% html_attr(‘href’) %>% enframe(name = “position”, value = “url”) %>% mutate(url = glue(‘https://www.rosebikes.com{url}’)) } # 3. Function to get the names of each bike get_bike_names <- function(url) {\nbike_model_name_tbl <- read_html(url) %>% html_nodes(css = “.catalog-category-model__title”) %>% html_text() %>% # Convert vector to tibble as_tibble()\n} # 4. Function to get the prices of each bike get_bike_prices <- function(url) {\nbike_model_price_tbl <- read_html(url) %>% html_nodes(css = “.product-tile-price__current-value”) %>% html_text() %>% # Convert vector to tibble as_tibble()\n} #### APPLYING ABOVE FUNCTIONS bike_family_url_tbl <- get_bike_family_urls(base_url) bike_family_url_tbl <- bike_family_url_tbl %>% slice(1:3) # Pick 3 categories # Create a table with bike model URLS bike_model_url_tbl <- tibble() for (i in seq_along(bike_family_url_tbl$url)) {\nweb <- toString(bike_family_url_tbl$url[i]) bike_model_url_tbl <- bind_rows(bike_model_url_tbl, get_model_urls(web))\n} # Create a table with bike model names bike_model_names_tbl <- tibble() for (i in seq_along(bike_model_url_tbl$url)) {\nweb <- toString(bike_model_url_tbl$url[i]) bike_model_names_tbl <- bind_rows(bike_model_names_tbl, get_bike_names(web))\n} # Rename cols names(bike_model_names_tbl)[1] <- “Bike Model” # Create a table with bike prices bike_model_prices_tbl <- tibble() for (i in seq_along(bike_model_url_tbl\\(url)) {  web <- toString(bike_model_url_tbl\\)url[i]) bike_model_prices_tbl <- bind_rows(bike_model_prices_tbl, get_bike_prices(web)) } # Rename cols names(bike_model_prices_tbl)[1] <- “Bike Prices” # Join into one table table_of_prices <- bind_cols(bike_model_names_tbl,bike_model_prices_tbl) knitr::kable(table_of_prices[1:10, ], caption = ‘Rosebike.com bicycle prices’)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "MyLabJournal",
    "section": "",
    "text": "library(vroom) library(tictoc) library(tidyverse) library(data.table)\ncol_types <- list( id = col_character(), type = col_character(), number = col_character(), country = col_character(), date = col_date(“%Y-%m-%d”), abstract = col_character(), title = col_character(), kind = col_character(), num_claims = col_double(), filename = col_character(), withdrawn = col_double() ) patent_tbl <- vroom( file = “Patent_data_reduced/patent.tsv”, delim = “, col_types = col_types, na = c(”“,”NA”, “NULL”) ) uspc_tbl <- vroom( file = “Patent_data_reduced/uspc.tsv”, delim = “, col_types = col_types, na = c(”“,”NA”, “NULL”) ) patent_assignee_tbl <- vroom( file = “Patent_data_reduced/patent_assignee.tsv”, delim = “, col_types = col_types, na = c(”“,”NA”, “NULL”) ) assignee_tbl <- vroom( file = “Patent_data_reduced/assignee.tsv”, delim = “, col_types = col_types, na = c(”“,”NA”, “NULL”) )\n#———————Qustion 1————————\nclass(assignee_tbl) setDT(assignee_tbl) class(patent_assignee_tbl) setDT(patent_assignee_tbl) class(patent_tbl) setDT(patent_tbl) tic() Q1_patent_data <- merge(x = patent_assignee_tbl, y = assignee_tbl, by.x=“assignee_id”, by.y =“id”, all.x = TRUE, all.y = FALSE) toc() setkey(Q1_patent_data, “assignee_id”) key(Q1_patent_data) Q1_patent_data %>% dim() keep_cols <- c(“assignee_id”,“patent_id”,“organization”) Q1_patent_data <- Q1_patent_data[, ..keep_cols] Q1_patent_data %>% dim() Q1_patent_data %>% glimpse() #Count_Q1 contains the data of the companies/organisations and the number of patents they hold in decending oreder tic() Count_Q1<- Q1_patent_data %>% filter(!is.na(organization)) %>% count(organization)%>% arrange(desc(n)) toc() #Print the top 10 companies with max patents head(Count_Q1,10)\n#———————Qustion 2————————\nclass(patent_tbl) setDT(patent_tbl) #Q2_patent_all has patent,patentdata,asignee data merged tic() Q2_patent_all <- merge(x = patent_tbl, y = Q1_patent_data, by.x=“id”, by.y =“patent_id”, all.x = TRUE, all.y = FALSE) toc() #Selecting a timeframe (Aug 1 2014 to Aug 31 2014) and building a new data frame Q2_Aug_patents Q2_Aug_patents<- with(Q2_patent_all, Q2_patent_all[(date >= “2014-08-01” & date <= “2014-08-31”) ]) #Count_Aug has the data of all the organisations that got a patent in Aug 2014 in desc order #with number of patents tic() Count_Aug<- Q2_Aug_patents %>% filter(!is.na(organization)) %>% count(organization)%>% arrange(desc(n)) toc() #Company with most patents in August 2014 head(Count_Aug,1) #Top 10 companies with new patents in August 2014 head(Count_Aug,10)\n#———————Qustion 3————————\ntic() Q3_patent_all <- merge(x = uspc_tbl, y = Q1_patent_data, by.x=“patent_id”, by.y =“patent_id”, all.x = TRUE, all.y = FALSE) toc() #Most innovative class can be calculated by summing the total number of patents for each class tic() mostinnovative_class_Q3<- Q3_patent_all %>% filter(!is.na(mainclass_id)) %>% count(mainclass_id)%>% arrange(desc(n)) toc()\n#making a df of top10 companies only to investigate the top 5 uspto Q3_top10 <- Q3_patent_all[Q3_patent_all\\(organization %in% c('International Business Machines Corporation','Samsung Electronics Co., Ltd.','Canon Kabushiki Kaisha','Sony Corporation','Microsoft Corporation','Google Inc.','Kabushiki Kaisha Toshiba','QUALCOMM Incorporated','LG Electronics Inc.','Panasonic Corporation'),] #adding a new column with has Company name & Class togeather titled \"Company_Class\" Q3_top10\\)Company_Class <- paste(Q3_top10\\(organization, Q3_top10\\)mainclass_id) #Counting the Company_class and arranging in desc order tic() Q3_top10_CC<- Q3_top10 %>% count(Company_Class)%>% arrange(desc(n)) toc()\n#displaying the most innovative class and its corresponding number of patents of that class head(mostinnovative_class_Q3,1)\n#Shows the top 5 USPTO Classes from the top 10 companies granted patents head(Q3_top10_CC,5)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]